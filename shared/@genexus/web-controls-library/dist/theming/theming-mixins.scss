@mixin dragging-behavior(
  $accept-drag-class: null,
  $no-accept-drag-class: null,
  $start-dragging-class: null,
  $drag-over-class: null
) {
  @if $accept-drag-class != null {
    &.accept-drag {
      @extend #{$accept-drag-class} !optional;
    }
  }
  @if $no-accept-drag-class != null {
    &.no-accept-drag {
      @extend #{$no-accept-drag-class} !optional;
    }
  }
  @if $start-dragging-class != null {
    &.start-dragging-class {
      @extend #{$start-dragging-class} !optional;
    }
  }
  @if $drag-over-class != null {
    &.drag-over-class {
      @extend #{$drag-over-class} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-image custom elements
/// @param {map} $class Base class of the component
@mixin gx-image(
  $class,
  $accept-drag-class: null,
  $no-accept-drag-class: null,
  $start-dragging-class: null,
  $drag-over-class: null
) {
  img {
    @extend #{$class} !optional;
  }
  @include dragging-behavior(
    $accept-drag-class,
    $no-accept-drag-class,
    $start-dragging-class,
    $drag-over-class
  );
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-table custom elements
/// @param {map} $class Base class of the component
/// @param {map} $horizontal-line Class of the horizontal line separator (to be implemented)
@mixin gx-table($class, $horizontal-line: null) {
  @extend #{$class} !optional;
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-textblock custom elements
/// @param {map} $class Base class of the component
/// @param {map} $accept-drag-class Class to be used when the component shows that it accepts a drop operation
/// @param {map} $no-accept-drag-class Class to be used when the component shows that it doesn't accept a drop operation
/// @param {map} $start-dragging-class Class to be used when the component starts being dragged
/// @param {map} $drag-over-class Class to be used when the component is hovered by other control during a drag operation
@mixin gx-textblock(
  $class,
  $accept-drag-class: null,
  $no-accept-drag-class: null,
  $start-dragging-class: null,
  $drag-over-class: null
) {
  @include dragging-behavior(
    $accept-drag-class,
    $no-accept-drag-class,
    $start-dragging-class,
    $drag-over-class
  );
  .content,
  .label-content {
    @extend #{$class} !optional;
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-edit custom elements
/// @param {map} $class Base class of the component
@mixin gx-edit($class) {
  input,
  textarea {
    @extend #{$class} !optional;
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-form-field custom elements
/// @param {map} $class Base class of the field inside the component
/// @param {map} $label Base class of the label of the component
/// @param {map} $highlighted Class to be used when the component is in active state
/// @param {map} $accept-drag-class Class to be used when the component shows that it accepts a drop operation
/// @param {map} $no-accept-drag-class Class to be used when the component shows that it doesn't accept a drop operation
/// @param {map} $start-dragging-class Class to be used when the component starts being dragged
/// @param {map} $drag-over-class Class to be used when the component is hovered by other control during a drag operation
@mixin gx-form-field(
  $class,
  $label: null,
  $highlighted: null,
  $accept-drag-class: null,
  $no-accept-drag-class: null,
  $start-dragging-class: null,
  $drag-over-class: null
) {
  @include dragging-behavior(
    $accept-drag-class,
    $no-accept-drag-class,
    $start-dragging-class,
    $drag-over-class
  );
  [data-part="field"] {
    @extend #{$class} !optional;
  }
  @if ($label != null) {
    [data-part="label"] {
      @extend #{$label} !optional;
    }
  }
  @if $highlighted != null {
    &:active {
      @extend #{$highlighted} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-button custom elements
/// @param {map} $class Base class of the component
@mixin gx-button($class) {
  button {
    @extend #{$class} !optional;
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-card custom elements
/// @param {map} $class Base class of the component
/// @param {map} $bars Base class of bars of the component
@mixin gx-card($class: null, $bars: null) {
  & > .card {
    @if ($class != null) {
      @extend #{$class} !optional;
    }
    @if ($bars != null) {
      & > .card-header,
      & > .card-footer {
        @extend #{$bars} !optional;
      }
    }
  }
}

