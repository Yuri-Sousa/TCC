import './stencil.core';
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import './stencil.core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface GxButton {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass': string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
       */
      'disabled': boolean;
      /**
       * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
       */
      'imagePosition': "above" | "before" | "after" | "below" | "behind";
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * This attribute lets you specify the size of the button.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `large`  | Large sized button.                                     | | `normal` | Standard sized button.                                  | | `small`  | Small sized button.                                     |
       */
      'size': "large" | "normal" | "small";
    }

    interface GxCanvasCell {
      /**
       * Defines the horizontal aligmnent of the content of the cell.
       */
      'align': "left" | "right" | "center";
      /**
       * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
       */
      'overflowMode': "scroll" | "clip";
      /**
       * Defines the vertical aligmnent of the content of the cell.
       */
      'valign': "top" | "bottom" | "medium";
    }

    interface GxCanvas {
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
    }

    interface GxCard {
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
    }

    interface GxCheckbox {
      /**
       * Specifies the label of the checkbox.
       */
      'caption': string;
      /**
       * Indicates that the control is selected by default.
       */
      'checked': boolean;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass': string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * Returns the id of the inner `input` element (if set).
       */
      'getNativeInputId': () => string;
      /**
       * The identifier of the control. Must be unique.
       */
      'id': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
    }

    interface GxEdit {
      'area': string;
      /**
       * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
       */
      'autocapitalize': "none" | "sentences" | "words" | "characters";
      /**
       * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
       */
      'autocomplete': "on" | "off";
      /**
       * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
       */
      'autocorrect': string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * Returns the id of the inner `input` element (if set).
       */
      'getNativeInputId': () => string;
      /**
       * The identifier of the control. Must be unique.
       */
      'id': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * Controls if the element accepts multiline text.
       */
      'multiline': boolean;
      /**
       * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
       */
      'placeholder': string;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      'readonly': boolean;
      /**
       * If true, a trigger button is shown next to the edit field. The button can be customized using `trigger-text` and `trigger-class` attributes, or adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
       */
      'showTrigger': boolean;
      /**
       * The text of the trigger button. If a text is specified and an image is specified (through an element with `slot="trigger-content"`), the content is ignored and the text is used instead.
       */
      'triggerText': string;
      /**
       * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
       */
      'type': "date"
    | "datetime-local"
    | "email"
    | "file"
    | "number"
    | "password"
    | "search"
    | "tel"
    | "text"
    | "url";
      /**
       * The initial value of the control.
       */
      'value': string;
    }

    interface GxFormField {
      /**
       * The text to set as the label of the field.
       */
      'labelCaption': string;
      /**
       * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
       */
      'labelPosition': "none" | "top" | "right" | "bottom" | "left" | "float";
    }

    interface GxImage {
      /**
       * This attribute lets you specify the alternative text.
       */
      'alt': string;
      /**
       * A CSS class to set as the inner element class.
       */
      'cssClass': string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * This attribute lets you specify the height.
       */
      'height': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * This attribute lets you specify the low resolution image SRC.
       */
      'lowResolutionSrc': string;
      /**
       * This attribute lets you specify the SRC.
       */
      'src': string;
      /**
       * This attribute lets you specify the width.
       */
      'width': string;
    }

    interface GxLayoutEditorPlaceholder {

    }

    interface GxLayoutEditor {
      /**
       * The abstract form model object
       */
      'model': any;
      /**
       * Array with the identifiers of the selected control's cells. If empty the whole layout-editor is marked as selected.
       */
      'selectedCells': string[];
    }

    interface GxLottie {
      /**
       * This attribute lets you specify a Lottie animation object
       */
      'animationData': any;
      /**
       * This attribute lets you specify if the animation will start playing as soon as it is ready
       */
      'autoPlay': boolean;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * This attribute lets you specify if the animation will loop
       */
      'loop': boolean;
      /**
       * This attribute lets you specify  the relative path to the animation object. (`animationData` and `path` are mutually exclusive)
       */
      'path': string;
      /**
       * Pause the animation
       */
      'pause': () => void;
      /**
       * Start playing the animation
       */
      'play': (from?: number, to?: number) => void;
      /**
       * Set the progress of the animation to any point
       */
      'setProgress': (progress: number) => void;
      /**
       * Stop the animation
       */
      'stop': () => void;
    }

    interface GxMessage {
      /**
       * Text for the close button.
       */
      'closeButtonText': string;
      /**
       * The time in miliseconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
       */
      'duration': number;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * Show a button for closing the meesage box
       */
      'showCloseButton': boolean;
      /**
       * Type of the button: * `info`: Information message * `warning`: Warning Message * `error`: Error message
       */
      'type': "info" | "warning" | "error";
    }

    interface GxModal {
      /**
       * This attribute lets you specify if the modal dialog is automatically closed when an action is clicked.
       */
      'autoClose': boolean;
      /**
       * This attribute lets you specify the label for the close button. Important for accessibility.
       */
      'closeButtonLabel': string;
      /**
       * This attribute lets you specify if the modal dialog is opened or closed.
       */
      'opened': boolean;
    }

    interface GxNavbarLink {
      /**
       * Indicates if the navbar item is the active one (for example, when the item represents the current page)
       */
      'active': boolean;
      /**
       * A CSS class to set as the inner element class.
       */
      'cssClass': string;
      /**
       * This attribute lets you specify if the navbar item is disabled.
       */
      'disabled': boolean;
      /**
       * This attribute lets you specify the URL of the navbar item.
       */
      'href': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
    }

    interface GxNavbar {
      /**
       * This attribute lets you specify an optional title for the navigation bar  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'caption': string;
      /**
       * A CSS class to set as the inner element class.
       */
      'cssClass': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * This attribute lets you specify the label for the toggle button. Important for accessibility.
       */
      'toggleButtonLabel': string;
    }

    interface GxPasswordEdit {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass': string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * Returns the id of the inner `input` element (if set).
       */
      'getNativeInputId': () => any;
      /**
       * The identifier of the control. Must be unique.
       */
      'id': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
       */
      'placeholder': string;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      'readonly': boolean;
      /**
       * Text of the reveal button to offer hiding the password.
       */
      'revealButtonTextOff': string;
      /**
       * Text of the reveal button to offer revealing the password.
       */
      'revealButtonTextOn': string;
      /**
       * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
       */
      'showRevealButton': boolean;
      /**
       * The initial value of the control.
       */
      'value': string;
    }

    interface GxProgressBar {
      /**
       * Sets the progress value.
       */
      'value': number;
    }

    interface GxRadioGroup {
      /**
       * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
       */
      'direction': "horizontal" | "vertical";
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      'id': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * The name that will be set to all the inner inputs of type radio
       */
      'name': string;
      /**
       * The initial value of the control. Setting the value automatically selects the corresponding radio option.
       */
      'value': string;
    }

    interface GxRadioOption {
      /**
       * Specifies the label of the radio.
       */
      'caption': string;
      /**
       * Indicates that the control is selected by default.
       */
      'checked': boolean;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass': string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      'id': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * The name of the inner input of type radio
       */
      'name': string;
      /**
       * The initial value of the control.
       */
      'value': string;
    }

    interface GxSelectOption {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass': string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * Indicates that the control is selected by default.
       */
      'selected': boolean;
      /**
       * The initial value of the control.
       */
      'value': string;
    }

    interface GxSelect {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass': string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * Returns the id of the inner `input` element (if set).
       */
      'getNativeInputId': () => string;
      /**
       * The identifier of the control. Must be unique.
       */
      'id': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      'readonly': boolean;
      /**
       * The initial value of the control. Setting the value automatically selects the corresponding option.
       */
      'value': string;
    }

    interface GxTabCaption {
      /**
       * This attribute lets you specify if the tab page is disabled
       */
      'disabled': false;
      /**
       * This attribute lets you specify if the tab page corresponding to this caption is selected
       */
      'selected': false;
    }

    interface GxTabPage {

    }

    interface GxTab {
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
    }

    interface GxTableCell {
      /**
       * Defines the horizontal aligmnent of the content of the cell.
       */
      'align': "left" | "right" | "center";
      /**
       * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
       */
      'area': string;
      /**
       * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
       */
      'overflowMode': "scroll" | "clip";
      /**
       * Defines the vertical aligmnent of the content of the cell.
       */
      'valign': "top" | "bottom" | "medium";
    }

    interface GxTable {
      /**
       * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
       */
      'areasTemplate': string;
      /**
       * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
       */
      'columnsTemplate': string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
      /**
       * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
       */
      'rowsTemplate': string;
    }

    interface GxTextblock {
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled': boolean;
      /**
       * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
       */
      'href': string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode': "collapse" | "keep-space";
    }
  }


    interface HTMLGxButtonElement extends StencilComponents.GxButton, HTMLStencilElement {}

    var HTMLGxButtonElement: {
      prototype: HTMLGxButtonElement;
      new (): HTMLGxButtonElement;
    };
    

    interface HTMLGxCanvasCellElement extends StencilComponents.GxCanvasCell, HTMLStencilElement {}

    var HTMLGxCanvasCellElement: {
      prototype: HTMLGxCanvasCellElement;
      new (): HTMLGxCanvasCellElement;
    };
    

    interface HTMLGxCanvasElement extends StencilComponents.GxCanvas, HTMLStencilElement {}

    var HTMLGxCanvasElement: {
      prototype: HTMLGxCanvasElement;
      new (): HTMLGxCanvasElement;
    };
    

    interface HTMLGxCardElement extends StencilComponents.GxCard, HTMLStencilElement {}

    var HTMLGxCardElement: {
      prototype: HTMLGxCardElement;
      new (): HTMLGxCardElement;
    };
    

    interface HTMLGxCheckboxElement extends StencilComponents.GxCheckbox, HTMLStencilElement {}

    var HTMLGxCheckboxElement: {
      prototype: HTMLGxCheckboxElement;
      new (): HTMLGxCheckboxElement;
    };
    

    interface HTMLGxEditElement extends StencilComponents.GxEdit, HTMLStencilElement {}

    var HTMLGxEditElement: {
      prototype: HTMLGxEditElement;
      new (): HTMLGxEditElement;
    };
    

    interface HTMLGxFormFieldElement extends StencilComponents.GxFormField, HTMLStencilElement {}

    var HTMLGxFormFieldElement: {
      prototype: HTMLGxFormFieldElement;
      new (): HTMLGxFormFieldElement;
    };
    

    interface HTMLGxImageElement extends StencilComponents.GxImage, HTMLStencilElement {}

    var HTMLGxImageElement: {
      prototype: HTMLGxImageElement;
      new (): HTMLGxImageElement;
    };
    

    interface HTMLGxLayoutEditorPlaceholderElement extends StencilComponents.GxLayoutEditorPlaceholder, HTMLStencilElement {}

    var HTMLGxLayoutEditorPlaceholderElement: {
      prototype: HTMLGxLayoutEditorPlaceholderElement;
      new (): HTMLGxLayoutEditorPlaceholderElement;
    };
    

    interface HTMLGxLayoutEditorElement extends StencilComponents.GxLayoutEditor, HTMLStencilElement {}

    var HTMLGxLayoutEditorElement: {
      prototype: HTMLGxLayoutEditorElement;
      new (): HTMLGxLayoutEditorElement;
    };
    

    interface HTMLGxLottieElement extends StencilComponents.GxLottie, HTMLStencilElement {}

    var HTMLGxLottieElement: {
      prototype: HTMLGxLottieElement;
      new (): HTMLGxLottieElement;
    };
    

    interface HTMLGxMessageElement extends StencilComponents.GxMessage, HTMLStencilElement {}

    var HTMLGxMessageElement: {
      prototype: HTMLGxMessageElement;
      new (): HTMLGxMessageElement;
    };
    

    interface HTMLGxModalElement extends StencilComponents.GxModal, HTMLStencilElement {}

    var HTMLGxModalElement: {
      prototype: HTMLGxModalElement;
      new (): HTMLGxModalElement;
    };
    

    interface HTMLGxNavbarLinkElement extends StencilComponents.GxNavbarLink, HTMLStencilElement {}

    var HTMLGxNavbarLinkElement: {
      prototype: HTMLGxNavbarLinkElement;
      new (): HTMLGxNavbarLinkElement;
    };
    

    interface HTMLGxNavbarElement extends StencilComponents.GxNavbar, HTMLStencilElement {}

    var HTMLGxNavbarElement: {
      prototype: HTMLGxNavbarElement;
      new (): HTMLGxNavbarElement;
    };
    

    interface HTMLGxPasswordEditElement extends StencilComponents.GxPasswordEdit, HTMLStencilElement {}

    var HTMLGxPasswordEditElement: {
      prototype: HTMLGxPasswordEditElement;
      new (): HTMLGxPasswordEditElement;
    };
    

    interface HTMLGxProgressBarElement extends StencilComponents.GxProgressBar, HTMLStencilElement {}

    var HTMLGxProgressBarElement: {
      prototype: HTMLGxProgressBarElement;
      new (): HTMLGxProgressBarElement;
    };
    

    interface HTMLGxRadioGroupElement extends StencilComponents.GxRadioGroup, HTMLStencilElement {}

    var HTMLGxRadioGroupElement: {
      prototype: HTMLGxRadioGroupElement;
      new (): HTMLGxRadioGroupElement;
    };
    

    interface HTMLGxRadioOptionElement extends StencilComponents.GxRadioOption, HTMLStencilElement {}

    var HTMLGxRadioOptionElement: {
      prototype: HTMLGxRadioOptionElement;
      new (): HTMLGxRadioOptionElement;
    };
    

    interface HTMLGxSelectOptionElement extends StencilComponents.GxSelectOption, HTMLStencilElement {}

    var HTMLGxSelectOptionElement: {
      prototype: HTMLGxSelectOptionElement;
      new (): HTMLGxSelectOptionElement;
    };
    

    interface HTMLGxSelectElement extends StencilComponents.GxSelect, HTMLStencilElement {}

    var HTMLGxSelectElement: {
      prototype: HTMLGxSelectElement;
      new (): HTMLGxSelectElement;
    };
    

    interface HTMLGxTabCaptionElement extends StencilComponents.GxTabCaption, HTMLStencilElement {}

    var HTMLGxTabCaptionElement: {
      prototype: HTMLGxTabCaptionElement;
      new (): HTMLGxTabCaptionElement;
    };
    

    interface HTMLGxTabPageElement extends StencilComponents.GxTabPage, HTMLStencilElement {}

    var HTMLGxTabPageElement: {
      prototype: HTMLGxTabPageElement;
      new (): HTMLGxTabPageElement;
    };
    

    interface HTMLGxTabElement extends StencilComponents.GxTab, HTMLStencilElement {}

    var HTMLGxTabElement: {
      prototype: HTMLGxTabElement;
      new (): HTMLGxTabElement;
    };
    

    interface HTMLGxTableCellElement extends StencilComponents.GxTableCell, HTMLStencilElement {}

    var HTMLGxTableCellElement: {
      prototype: HTMLGxTableCellElement;
      new (): HTMLGxTableCellElement;
    };
    

    interface HTMLGxTableElement extends StencilComponents.GxTable, HTMLStencilElement {}

    var HTMLGxTableElement: {
      prototype: HTMLGxTableElement;
      new (): HTMLGxTableElement;
    };
    

    interface HTMLGxTextblockElement extends StencilComponents.GxTextblock, HTMLStencilElement {}

    var HTMLGxTextblockElement: {
      prototype: HTMLGxTextblockElement;
      new (): HTMLGxTextblockElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'gx-button': JSXElements.GxButtonAttributes;
    'gx-canvas-cell': JSXElements.GxCanvasCellAttributes;
    'gx-canvas': JSXElements.GxCanvasAttributes;
    'gx-card': JSXElements.GxCardAttributes;
    'gx-checkbox': JSXElements.GxCheckboxAttributes;
    'gx-edit': JSXElements.GxEditAttributes;
    'gx-form-field': JSXElements.GxFormFieldAttributes;
    'gx-image': JSXElements.GxImageAttributes;
    'gx-layout-editor-placeholder': JSXElements.GxLayoutEditorPlaceholderAttributes;
    'gx-layout-editor': JSXElements.GxLayoutEditorAttributes;
    'gx-lottie': JSXElements.GxLottieAttributes;
    'gx-message': JSXElements.GxMessageAttributes;
    'gx-modal': JSXElements.GxModalAttributes;
    'gx-navbar-link': JSXElements.GxNavbarLinkAttributes;
    'gx-navbar': JSXElements.GxNavbarAttributes;
    'gx-password-edit': JSXElements.GxPasswordEditAttributes;
    'gx-progress-bar': JSXElements.GxProgressBarAttributes;
    'gx-radio-group': JSXElements.GxRadioGroupAttributes;
    'gx-radio-option': JSXElements.GxRadioOptionAttributes;
    'gx-select-option': JSXElements.GxSelectOptionAttributes;
    'gx-select': JSXElements.GxSelectAttributes;
    'gx-tab-caption': JSXElements.GxTabCaptionAttributes;
    'gx-tab-page': JSXElements.GxTabPageAttributes;
    'gx-tab': JSXElements.GxTabAttributes;
    'gx-table-cell': JSXElements.GxTableCellAttributes;
    'gx-table': JSXElements.GxTableAttributes;
    'gx-textblock': JSXElements.GxTextblockAttributes;
    }
  }

  namespace JSXElements {

    export interface GxButtonAttributes extends HTMLAttributes {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass'?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
       */
      'disabled'?: boolean;
      /**
       * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
       */
      'imagePosition'?: "above" | "before" | "after" | "below" | "behind";
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * Emitted when the element is clicked.
       */
      'onOnClick'?: (event: CustomEvent) => void;
      /**
       * This attribute lets you specify the size of the button.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `large`  | Large sized button.                                     | | `normal` | Standard sized button.                                  | | `small`  | Small sized button.                                     |
       */
      'size'?: "large" | "normal" | "small";
    }

    export interface GxCanvasCellAttributes extends HTMLAttributes {
      /**
       * Defines the horizontal aligmnent of the content of the cell.
       */
      'align'?: "left" | "right" | "center";
      /**
       * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
       */
      'overflowMode'?: "scroll" | "clip";
      /**
       * Defines the vertical aligmnent of the content of the cell.
       */
      'valign'?: "top" | "bottom" | "medium";
    }

    export interface GxCanvasAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * Emitted when the element is clicked.
       */
      'onOnClick'?: (event: CustomEvent) => void;
    }

    export interface GxCardAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
    }

    export interface GxCheckboxAttributes extends HTMLAttributes {
      /**
       * Specifies the label of the checkbox.
       */
      'caption'?: string;
      /**
       * Indicates that the control is selected by default.
       */
      'checked'?: boolean;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass'?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      'id'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      'onOnChange'?: (event: CustomEvent) => void;
    }

    export interface GxEditAttributes extends HTMLAttributes {
      'area'?: string;
      /**
       * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
       */
      'autocapitalize'?: "none" | "sentences" | "words" | "characters";
      /**
       * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
       */
      'autocomplete'?: "on" | "off";
      /**
       * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
       */
      'autocorrect'?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      'id'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * Controls if the element accepts multiline text.
       */
      'multiline'?: boolean;
      /**
       * The `gxTriggerClick` event is fired when the trigger button is clicked.
       */
      'onGxTriggerClick'?: (event: CustomEvent) => void;
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
       */
      'onOnChange'?: (event: CustomEvent) => void;
      /**
       * The `input` event is fired synchronously when the value is changed.
       */
      'onOnInput'?: (event: CustomEvent) => void;
      /**
       * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
       */
      'placeholder'?: string;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      'readonly'?: boolean;
      /**
       * If true, a trigger button is shown next to the edit field. The button can be customized using `trigger-text` and `trigger-class` attributes, or adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
       */
      'showTrigger'?: boolean;
      /**
       * The text of the trigger button. If a text is specified and an image is specified (through an element with `slot="trigger-content"`), the content is ignored and the text is used instead.
       */
      'triggerText'?: string;
      /**
       * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
       */
      'type'?: "date"
    | "datetime-local"
    | "email"
    | "file"
    | "number"
    | "password"
    | "search"
    | "tel"
    | "text"
    | "url";
      /**
       * The initial value of the control.
       */
      'value'?: string;
    }

    export interface GxFormFieldAttributes extends HTMLAttributes {
      /**
       * The text to set as the label of the field.
       */
      'labelCaption'?: string;
      /**
       * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
       */
      'labelPosition'?: "none" | "top" | "right" | "bottom" | "left" | "float";
    }

    export interface GxImageAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify the alternative text.
       */
      'alt'?: string;
      /**
       * A CSS class to set as the inner element class.
       */
      'cssClass'?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * This attribute lets you specify the height.
       */
      'height'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * This attribute lets you specify the low resolution image SRC.
       */
      'lowResolutionSrc'?: string;
      /**
       * Emitted when the element is clicked.
       */
      'onOnClick'?: (event: CustomEvent) => void;
      /**
       * This attribute lets you specify the SRC.
       */
      'src'?: string;
      /**
       * This attribute lets you specify the width.
       */
      'width'?: string;
    }

    export interface GxLayoutEditorPlaceholderAttributes extends HTMLAttributes {

    }

    export interface GxLayoutEditorAttributes extends HTMLAttributes {
      /**
       * The abstract form model object
       */
      'model'?: any;
      /**
       * Fired when a control (that wasn't already inside the layout editor) has been dropped on a valid drop target (for example, a control from a toolbox or an object from the knowledge base navigator)  ##### Dragging a control  If a control is being dragged, the dataTransfer property of the event must have the following format:  `"GX_DASHBOARD_ADDELEMENT,[GeneXus type of control]"`  where:  * `GX_DASHBOARD_ADDELEMENT` is the type of action * `[GeneXus type of control]` is the type of control that's been added. This value can have any value and will be passed as part of the information sent as part of the event.  ##### Dragging a KB object  If a KB object is being dragged, the dataTransfer property of the event must contain the name of the KB object.  ##### Dropped control information  An object containing information of the add operation is sent in the `detail` property of the event object.  If a KB object was dropped, the following properties are set:  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `kbObjectName`    | Name of the GeneXus object                                                                                                               |  If control was dropped, the following properties are set.  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `elementType`     | The type of the control that's been added and was received as the `[GeneXus type of control]` in the dataTransfer of the drop operation     |  Depending on where the control was dropped, additional information will be provided and different properties will be set. There are four possible cases:  1. Dropped on an empty container or in the last row of a container 2. Dropped on a new row of a non empty container 3. Dropped on an existing empty cell 4. Dropped on an existing row   ###### 1. Dropped on an empty container or on a new row that will be the last row of a container  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `containerId`     | Identifier of the container where the control was dropped                                                                                   |  ###### 2. Dropped on a new row of a non empty container  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `beforeRowId`     | Identifier of the row next to the row where the control was dropped. An empty string if dropped in the last row or on an empty container.   |  ###### 3. Dropped on an existing empty cell  | Property      | Details                                                                                                          | | ------------- | ---------------------------------------------------------------------------------------------------------------- | | `targetCellId`| Identifier of the cell where the control was dropped |    ###### 4. Dropped on an existing row  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `beforeCelllId`   | Identifier of the cell that, after the drop operation, ends located after the dropped control. An empty string if dropped as the last cell. | | `targetRowId`     | Identifier of the row where the control was dropped                                                                                         |
       */
      'onControlAdded'?: (event: CustomEvent) => void;
      /**
       * Fired when a control has been removed from the layout  An object containing information of the add operation is sent in the `detail` property of the event object  | Property           | Details                                                                                                                                     | | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------- | | `cellIds`          | Identifier of the removed cells |
       */
      'onControlRemoved'?: (event: CustomEvent) => void;
      /**
       * Fired when the selection has been changed  An object containing information of the select operation is sent in the `detail` property of the event object  | Property       | Details                           | | -------------- | --------------------------------- | | `cellIds`      | Identifier of the selected cells  |
       */
      'onControlSelected'?: (event: CustomEvent) => void;
      /**
       * Fired when a control is moved inside the layout editor to a new location  An object containing information of the move operation is sent in the `detail` property of the event object  Regardless where the control was dropped, the detail object will contain information about the source row and the id of the dropped control:  | Property         | Details                                                                                                          | | ---------------- | ---------------------------------------------------------------------------------------------------------------- | | `sourceCellId`   | Identifier of the source cell                                                                                    | | `sourceRowId`    | Identifier of the source row                                                                                     |  Depending on where the control was dropped, additional information will be provided and different properties will be set. There are four possible cases:  1. Dropped on an empty container or on a new row that will be the last row of a container 2. Dropped on a new row of a non empty container 3. Dropped on an existing empty cell 4. Dropped on an existing row   ###### 1. Dropped on an empty container or on a new row that will be the last row of a container  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `containerId`     | Identifier of the container where the control was dropped                                                                                   |  ###### 2. Dropped on a new row of a non empty container  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `beforeRowId`     | Identifier of the row next to the row where the control was dropped. An empty string if dropped in the last row or on an empty container.   |  ###### 3. Dropped on an existing empty cell  | Property      | Details                                                                                                          | | ------------- | ---------------------------------------------------------------------------------------------------------------- | | `targetCellId`| Identifier of the cell where the control was dropped |    ###### 4. Dropped on an existing row  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `beforeCellId`    | Identifier of the cell that, after the drop operation, ends located after the dropped control. An empty string if dropped as the last cell. | | `targetRowId`     | Identifier of the row where the control was dropped                                                                                         |
       */
      'onMoveCompleted'?: (event: CustomEvent) => void;
      /**
       * Array with the identifiers of the selected control's cells. If empty the whole layout-editor is marked as selected.
       */
      'selectedCells'?: string[];
    }

    export interface GxLottieAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify a Lottie animation object
       */
      'animationData'?: any;
      /**
       * This attribute lets you specify if the animation will start playing as soon as it is ready
       */
      'autoPlay'?: boolean;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * This attribute lets you specify if the animation will loop
       */
      'loop'?: boolean;
      /**
       * Emitted when the animation is loaded in the DOM.
       */
      'onAnimationLoad'?: (event: CustomEvent) => void;
      /**
       * Emitted when the element is clicked.
       */
      'onOnClick'?: (event: CustomEvent) => void;
      /**
       * This attribute lets you specify  the relative path to the animation object. (`animationData` and `path` are mutually exclusive)
       */
      'path'?: string;
    }

    export interface GxMessageAttributes extends HTMLAttributes {
      /**
       * Text for the close button.
       */
      'closeButtonText'?: string;
      /**
       * The time in miliseconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
       */
      'duration'?: number;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * Show a button for closing the meesage box
       */
      'showCloseButton'?: boolean;
      /**
       * Type of the button: * `info`: Information message * `warning`: Warning Message * `error`: Error message
       */
      'type'?: "info" | "warning" | "error";
    }

    export interface GxModalAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify if the modal dialog is automatically closed when an action is clicked.
       */
      'autoClose'?: boolean;
      /**
       * This attribute lets you specify the label for the close button. Important for accessibility.
       */
      'closeButtonLabel'?: string;
      /**
       * Fired when the modal dialog is closed
       */
      'onOnClose'?: (event: CustomEvent) => void;
      /**
       * Fired when the modal dialog is opened
       */
      'onOnOpen'?: (event: CustomEvent) => void;
      /**
       * This attribute lets you specify if the modal dialog is opened or closed.
       */
      'opened'?: boolean;
    }

    export interface GxNavbarLinkAttributes extends HTMLAttributes {
      /**
       * Indicates if the navbar item is the active one (for example, when the item represents the current page)
       */
      'active'?: boolean;
      /**
       * A CSS class to set as the inner element class.
       */
      'cssClass'?: string;
      /**
       * This attribute lets you specify if the navbar item is disabled.
       */
      'disabled'?: boolean;
      /**
       * This attribute lets you specify the URL of the navbar item.
       */
      'href'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * Emitted when the element is clicked.
       */
      'onOnClick'?: (event: CustomEvent) => void;
    }

    export interface GxNavbarAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify an optional title for the navigation bar  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'caption'?: string;
      /**
       * A CSS class to set as the inner element class.
       */
      'cssClass'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * This attribute lets you specify the label for the toggle button. Important for accessibility.
       */
      'toggleButtonLabel'?: string;
    }

    export interface GxPasswordEditAttributes extends HTMLAttributes {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass'?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      'id'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
       */
      'onOnChange'?: (event: CustomEvent) => void;
      /**
       * The `input` event is fired synchronously when the value is changed.
       */
      'onOnInput'?: (event: CustomEvent) => void;
      /**
       * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
       */
      'placeholder'?: string;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      'readonly'?: boolean;
      /**
       * Text of the reveal button to offer hiding the password.
       */
      'revealButtonTextOff'?: string;
      /**
       * Text of the reveal button to offer revealing the password.
       */
      'revealButtonTextOn'?: string;
      /**
       * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
       */
      'showRevealButton'?: boolean;
      /**
       * The initial value of the control.
       */
      'value'?: string;
    }

    export interface GxProgressBarAttributes extends HTMLAttributes {
      /**
       * Sets the progress value.
       */
      'value'?: number;
    }

    export interface GxRadioGroupAttributes extends HTMLAttributes {
      /**
       * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
       */
      'direction'?: "horizontal" | "vertical";
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      'id'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * The name that will be set to all the inner inputs of type radio
       */
      'name'?: string;
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      'onOnChange'?: (event: CustomEvent) => void;
      /**
       * The initial value of the control. Setting the value automatically selects the corresponding radio option.
       */
      'value'?: string;
    }

    export interface GxRadioOptionAttributes extends HTMLAttributes {
      /**
       * Specifies the label of the radio.
       */
      'caption'?: string;
      /**
       * Indicates that the control is selected by default.
       */
      'checked'?: boolean;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass'?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      'id'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * The name of the inner input of type radio
       */
      'name'?: string;
      /**
       * Emitted when the radio loads.
       */
      'onGxRadioDidLoad'?: (event: CustomEvent) => void;
      /**
       * Emitted when the radio unloads.
       */
      'onGxRadioDidUnload'?: (event: CustomEvent) => void;
      /**
       * Emitted when the radio button is selected.
       */
      'onGxSelect'?: (event: CustomEvent) => void;
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      'onOnChange'?: (event: CustomEvent) => void;
      /**
       * The initial value of the control.
       */
      'value'?: string;
    }

    export interface GxSelectOptionAttributes extends HTMLAttributes {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass'?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * Emitted when the option is disabled.
       */
      'onGxDisable'?: (event: CustomEvent) => void;
      /**
       * Emitted when the option is selected.
       */
      'onGxSelect'?: (event: CustomEvent) => void;
      /**
       * Emitted when the option loads.
       */
      'onGxSelectDidLoad'?: (event: CustomEvent) => void;
      /**
       * Emitted when the option unloads.
       */
      'onGxSelectDidUnload'?: (event: CustomEvent) => void;
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      'onOnChange'?: (event: CustomEvent) => void;
      /**
       * Indicates that the control is selected by default.
       */
      'selected'?: boolean;
      /**
       * The initial value of the control.
       */
      'value'?: string;
    }

    export interface GxSelectAttributes extends HTMLAttributes {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      'cssClass'?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      'id'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      'onOnChange'?: (event: CustomEvent) => void;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      'readonly'?: boolean;
      /**
       * The initial value of the control. Setting the value automatically selects the corresponding option.
       */
      'value'?: string;
    }

    export interface GxTabCaptionAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify if the tab page is disabled
       */
      'disabled'?: false;
      /**
       * Fired when the tab caption is selected
       */
      'onOnTabSelect'?: (event: CustomEvent) => void;
      /**
       * This attribute lets you specify if the tab page corresponding to this caption is selected
       */
      'selected'?: false;
    }

    export interface GxTabPageAttributes extends HTMLAttributes {

    }

    export interface GxTabAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * Fired when the active tab is changed
       */
      'onOnTabChange'?: (event: CustomEvent) => void;
    }

    export interface GxTableCellAttributes extends HTMLAttributes {
      /**
       * Defines the horizontal aligmnent of the content of the cell.
       */
      'align'?: "left" | "right" | "center";
      /**
       * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
       */
      'area'?: string;
      /**
       * This attribute defines how the control behaves when the content overflows.  | Value    | Details                                                     | | -------- | ----------------------------------------------------------- | | `scroll` | The overflowin content is hidden, but scrollbars are shown  | | `clip`   | The overflowing content is hidden, without scrollbars       |
       */
      'overflowMode'?: "scroll" | "clip";
      /**
       * Defines the vertical aligmnent of the content of the cell.
       */
      'valign'?: "top" | "bottom" | "medium";
    }

    export interface GxTableAttributes extends HTMLAttributes {
      /**
       * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
       */
      'areasTemplate'?: string;
      /**
       * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
       */
      'columnsTemplate'?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * Emitted when the element is clicked.
       */
      'onOnClick'?: (event: CustomEvent) => void;
      /**
       * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
       */
      'rowsTemplate'?: string;
    }

    export interface GxTextblockAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      'disabled'?: boolean;
      /**
       * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
       */
      'href'?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      'invisibleMode'?: "collapse" | "keep-space";
      /**
       * Emitted when the element is clicked.
       */
      'onOnClick'?: (event: CustomEvent) => void;
    }
  }

  interface HTMLElementTagNameMap {
    'gx-button': HTMLGxButtonElement
    'gx-canvas-cell': HTMLGxCanvasCellElement
    'gx-canvas': HTMLGxCanvasElement
    'gx-card': HTMLGxCardElement
    'gx-checkbox': HTMLGxCheckboxElement
    'gx-edit': HTMLGxEditElement
    'gx-form-field': HTMLGxFormFieldElement
    'gx-image': HTMLGxImageElement
    'gx-layout-editor-placeholder': HTMLGxLayoutEditorPlaceholderElement
    'gx-layout-editor': HTMLGxLayoutEditorElement
    'gx-lottie': HTMLGxLottieElement
    'gx-message': HTMLGxMessageElement
    'gx-modal': HTMLGxModalElement
    'gx-navbar-link': HTMLGxNavbarLinkElement
    'gx-navbar': HTMLGxNavbarElement
    'gx-password-edit': HTMLGxPasswordEditElement
    'gx-progress-bar': HTMLGxProgressBarElement
    'gx-radio-group': HTMLGxRadioGroupElement
    'gx-radio-option': HTMLGxRadioOptionElement
    'gx-select-option': HTMLGxSelectOptionElement
    'gx-select': HTMLGxSelectElement
    'gx-tab-caption': HTMLGxTabCaptionElement
    'gx-tab-page': HTMLGxTabPageElement
    'gx-tab': HTMLGxTabElement
    'gx-table-cell': HTMLGxTableCellElement
    'gx-table': HTMLGxTableElement
    'gx-textblock': HTMLGxTextblockElement
  }

  interface ElementTagNameMap {
    'gx-button': HTMLGxButtonElement;
    'gx-canvas-cell': HTMLGxCanvasCellElement;
    'gx-canvas': HTMLGxCanvasElement;
    'gx-card': HTMLGxCardElement;
    'gx-checkbox': HTMLGxCheckboxElement;
    'gx-edit': HTMLGxEditElement;
    'gx-form-field': HTMLGxFormFieldElement;
    'gx-image': HTMLGxImageElement;
    'gx-layout-editor-placeholder': HTMLGxLayoutEditorPlaceholderElement;
    'gx-layout-editor': HTMLGxLayoutEditorElement;
    'gx-lottie': HTMLGxLottieElement;
    'gx-message': HTMLGxMessageElement;
    'gx-modal': HTMLGxModalElement;
    'gx-navbar-link': HTMLGxNavbarLinkElement;
    'gx-navbar': HTMLGxNavbarElement;
    'gx-password-edit': HTMLGxPasswordEditElement;
    'gx-progress-bar': HTMLGxProgressBarElement;
    'gx-radio-group': HTMLGxRadioGroupElement;
    'gx-radio-option': HTMLGxRadioOptionElement;
    'gx-select-option': HTMLGxSelectOptionElement;
    'gx-select': HTMLGxSelectElement;
    'gx-tab-caption': HTMLGxTabCaptionElement;
    'gx-tab-page': HTMLGxTabPageElement;
    'gx-tab': HTMLGxTabElement;
    'gx-table-cell': HTMLGxTableCellElement;
    'gx-table': HTMLGxTableElement;
    'gx-textblock': HTMLGxTextblockElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;